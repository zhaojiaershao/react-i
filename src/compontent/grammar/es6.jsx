import React from 'react'
import './index.css'
const text =['声明变量的方式','模板字符串','结构赋值','ES6常用的10个新特性讲解']
const data = [ 
    '(1) var命令。var定义的变量可以修改，如果不初始化会输出undefined，不会报错var 声明的变量在window上，用let或者const去声明变量，这个变量不会被放到window上很多语言中都有块级作用域，但JS没有，它使用var声明变量，以function来划分作用域，大括号“{}却限定不了var的作用域，因此用var声明的变量具有变量提升的效果var 声明的变量作用域是全局的或者是函数级的(2)function命令 声明了一个名为 add的新变量，并为其分配了一个函数定义{}之间的内容被分配给了 add函数内部的代码不会被执行，只是存储在变量中以备将来使用(3) cosnt命令const定义的变量不可以修改，而且必须初始化该变量是个全局变量，或者是模块内的全局变量如果一个变量只有在声明时才被赋值一次，永远不会在其它的代码行里被重新赋值，那么应const，但是该变量的初始值有可能在未来会被调整（常变量）创建一个只读常量，在不同浏览器上表现为不可修改；建议申明后不修改；拥有块级作用域const 代表一个值的常量索引 ，也就是说，变量名字在内存中的指针不能够改变，但是指向这个值可能 改变const定义的变量不可修改，一般在require一个模块的时候用或者定义一些全局常量可以在全局作用域或者函数内声明常量，但是必须初始化常量常量不能和它所在作用域内其它变量或者函数拥有相同名称', 
    '1.之前我们也可以使用JavaScript输出模版字符串，通常是下面这样的：　但是我们可以看到：这样的传统做法需要使用大量的“”（双引号）和 + 来拼接才能得到我们需要的模版。但是这样是十分不方便的。　于是ES6中提供了模版字符串，用`（反引号）标识，用${}将变量括起来。上面的例子可以用模版字符串写成下面这样：　这样的做法就简洁了很多，我们不需要再使用大量的""和+来拼接字符串和变量。2.　当然，模版字符串可以引入变量，不使用变量也是可以的。如下所示： 3.　我们还可以先定义变量，然后在模版字符串中嵌入变量：　4.显然，由于反引号是模版字符串的标识，如果我们需要在字符串中使用反引号，我们就需要对其进行转义，如下所示： 5.注意：如果使用模版字符串表示多行字符串，所有的空格和缩进都会被保存在输出中！！　6. 在${}中的大括号里可以放入任意的JavaScript表达式，还可以进行运算，以及引用对象属性。', 
    'ES6的解构赋值，在我看来是提供了一个整体赋值的方案。包括数组和对象的整体赋值。基本原则如下：数组的元素是按次序排列的，变量的取值由它的位置决定；对象的属性没有次序，变量必须与属性同名，才能取到正确的值。对象的解构赋值对象的解构赋值和数组的解构赋值其实类似，但是数组的数组成员是有序的而对象的属性则是无序的，所以对象的解构赋值简单理解是等号的左边和右边的结构相同,对象的解构赋值是根据key值进行匹配',
  '1.不一样的变量声明：const和letES6推荐使用let声明局部变量，相比之前的var（无论声明在何处，都会被视为声明在函数的最顶部）let和var声明的区别：let表示声明变量，而const表示声明常量，两者都为块级作用域；const 声明量都会被认为是常量，意思就是它的值被设置完成后就不能再修改了：如果const的是一个对象，对象含的值是可以被修改的。抽象一点儿说，就是对象所指向的地址没有变就行：有几个点需要注意let 关键词声明的变量不具备变量提升（hoisting）特性let 和 const 声明只在最靠近的一个块中（花括号内）有效当使用常量 const 声明时，请使用大写变量，如：CAPITAL_CASINGconst 在声明时必须被赋值2.模板字符串在ES6之前，我们往往这么处理模板字符串：通过“\”和“+”来构建模板而对ES6来本的字符串格式化。将表达式嵌入字符串中进行拼接。用${}来界定；6反引号(``)直接搞定；3.箭头函数（Arrow Functions）6 中，箭头函数就是函数的一种简写形式，使用括号包裹参数，跟随一个 =>，紧接着是函数体头函数最直观的三个特点需要 function 关键字来创建函数略 return 关键字承当前上下文的 this 关键字'
]
export default class ES6 extends React.Component {
    constructor(){
        super()
        this.state= {
            index:0
        }
    }
    handleclick=(index)=>{
       this.setState({
           index
       })
    }
    render() {
        return (
            <div className='box-szg'>
                <div className="top-box">
                    ES6常用语法
                </div>
                <div className="left-box">
                    <ul>
                     {
                        text.map((item,index)=>{
                            return <li key={index} onClick={()=>this.handleclick(index)}>{item}</li>
                        })
                     }
                    </ul>
                </div>
                <div className="right-box">
                    <span className="wenzi">{data[this.state.index]}</span>
                </div>
            </div>
        )
    }
}
